{"version":3,"sources":["GameBoard/Cell/Cell.js","GameBoard/GameBoard.js","Menu/Menu.js","config/index.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleToggleCellStatus","bind","this","toggleCellStatus","row","column","x","y","width","size","height","fill","alive","onClick","Component","GameBoard","r","c","board","length","getDimension","cellSize","Math","min","floor","cells","push","cellsRec","map","cell","key","handleClickOnCell","pixelsPerCell","Menu","play","stop","nextStep","randomize","reset","countClass","finished","className","generation","playing","getStopButton","getStartButton","title","handleClickOnStep","icon","handleClickOnReset","handleClickOnPlay","handleClickOnStop","INITIAL_WIDTH","INITIAL_HEIGHT","INITIAL_SPEED","App","state","makeBoard","speed","previousProps","previousState","runSteps","random","setState","setTimeout","newBoard","changed","nbAliveNeighbours","getNumberOfNeighboursAlive","boardRowLength","boardColumnLength","nb","r1","c1","JSON","parse","stringify","Row","Col","sm","Boolean","window","location","hostname","match","library","add","fab","faPlay","faStop","faStepForward","faSync","faRandom","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8a3a6aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Cell extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleToggleCellStatus = this.handleToggleCellStatus.bind(this);\n  }\n\n  handleToggleCellStatus() {\n    this.props.toggleCellStatus(this.props.row, this.props.column);\n  }\n\n  render() {\n    return (\n      <rect\n        x={this.props.x}\n        y={this.props.y}\n        width={this.props.size}\n        height={this.props.size}\n        fill={this.props.alive ? '#2bc7d4' : '#CCC'}\n        onClick={() => this.handleToggleCellStatus()}\n      ></rect>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Cell from './Cell/Cell';\n\nexport default class GameBoard extends Component {\n  handleClickOnCell(r, c) {\n    this.props.toggleCellStatus(r, c);\n  }\n\n  getDimension() {\n    return {\n      height: this.props.board.length,\n      width: this.props.board[0].length,\n    };\n  }\n\n  render() {\n    const { width, height } = this.getDimension();\n    const cellSize = Math.min(\n      Math.floor(800 / width),\n      Math.floor(1200 / height)\n    );\n    const spaceBetweenCell = 1;\n    const cells = [];\n\n    for (let r = 0; r < height; r++) {\n      for (let c = 0; c < width; c++) {\n        cells.push({\n          x: c * (cellSize + spaceBetweenCell),\n          y: r * (cellSize + spaceBetweenCell),\n          row: r,\n          column: c,\n          alive: this.props.board[r][c],\n        });\n      }\n    }\n\n    const cellsRec = cells.map((cell) => (\n      <Cell\n        key={`${cell.y}.${cell.x}`}\n        x={cell.x}\n        y={cell.y}\n        row={cell.row}\n        column={cell.column}\n        alive={cell.alive}\n        size={cellSize}\n        toggleCellStatus={this.handleClickOnCell.bind(this)}\n      />\n    ));\n\n    return (\n      <svg\n        width={(cellSize + spaceBetweenCell) * width}\n        height={(cellSize + spaceBetweenCell) * height}\n      >\n        {cellsRec}\n      </svg>\n    );\n  }\n\n  getCells() {\n    const { width, height } = this.getDimension();\n    const pixelsPerCell = Math.min(\n      Math.floor(1200 / width),\n      Math.floor(800 / height)\n    );\n    const spaceBetweenCell = 1;\n    const cells = [];\n\n    for (let r = 0; r < width; r++) {\n      for (let c = 0; c < height; c++) {\n        cells.push({\n          x: c * (pixelsPerCell + spaceBetweenCell),\n          y: r * (pixelsPerCell + spaceBetweenCell),\n          alive: this.props.board[r][c],\n          size: pixelsPerCell,\n        });\n      }\n    }\n\n    return cells;\n  }\n}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Menu.css';\n\nexport default class Menu extends Component {\n  handleClickOnPlay() {\n    this.props.play();\n  }\n\n  handleClickOnStop() {\n    this.props.stop();\n  }\n\n  handleClickOnStep() {\n    this.props.nextStep();\n  }\n\n  handleClickOnReset(randomize = false) {\n    this.props.reset(randomize);\n  }\n\n  render() {\n    let countClass = 'count';\n\n    if (this.props.finished) {\n      countClass += ' finished';\n    }\n    return (\n      <div className=\"menu\">\n        <div>\n          <blockquote className=\"blockquote\">\n            <p className=\"h1 mb-0\">Game of life</p>\n            <footer className=\"blockquote-footer\">By atchandj</footer>\n          </blockquote>\n        </div>\n        <div className=\"generation\">\n          <span>\n            Generation:&nbsp;\n            <span className={countClass}>{this.props.generation}</span>\n          </span>\n        </div>\n        <div>\n          {this.props.playing ? this.getStopButton() : this.getStartButton()}\n        </div>\n\n        <div>\n          <a title=\"Next step\" onClick={this.handleClickOnStep.bind(this)}>\n            <FontAwesomeIcon icon=\"step-forward\" />\n            Step\n          </a>\n        </div>\n\n        <div>\n          <a\n            title=\"Random\"\n            onClick={() => {\n              this.handleClickOnReset(true);\n            }}\n          >\n            <FontAwesomeIcon icon=\"random\" />\n            Random board\n          </a>\n        </div>\n\n        <div>\n          <a\n            title=\"Reset\"\n            onClick={() => {\n              this.handleClickOnReset(false);\n            }}\n          >\n            <FontAwesomeIcon icon=\"sync\" />\n            Reset\n          </a>\n        </div>\n      </div>\n    );\n  }\n\n  getStartButton() {\n    return (\n      <a title=\"Start\" onClick={this.handleClickOnPlay.bind(this)}>\n        <FontAwesomeIcon icon=\"play\" />\n        Play\n      </a>\n    );\n  }\n\n  getStopButton() {\n    return (\n      <a title=\"Stop\" onClick={this.handleClickOnStop.bind(this)}>\n        <FontAwesomeIcon icon=\"stop\" />\n        Stop\n      </a>\n    );\n  }\n}\n","export const INITIAL_WIDTH = 40;\nexport const INITIAL_HEIGHT = 30;\nexport const INITIAL_SPEED = 150;\n\nexport default {\n  INITIAL_WIDTH,\n  INITIAL_HEIGHT,\n  INITIAL_SPEED,\n};\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport GameBoard from \"./GameBoard/GameBoard\";\nimport Menu from \"./Menu/Menu\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { INITIAL_WIDTH, INITIAL_HEIGHT, INITIAL_SPEED } from \"./config\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      board: this.makeBoard(INITIAL_WIDTH, INITIAL_HEIGHT),\n      playing: false,\n      generation: 0,\n      speed: INITIAL_SPEED,\n      finished: false,\n    };\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (!previousState.playing && this.state.playing) {\n      this.runSteps();\n    }\n  }\n\n  makeBoard(width, height, randomize = false) {\n    let board = [];\n\n    for (let r = 0; r < height; r++) {\n      board[r] = [];\n      for (let c = 0; c < width; c++) {\n        board[r][c] = randomize ? Math.random() > 0.7 : false;\n      }\n    }\n\n    return board;\n  }\n\n  play() {\n    this.setState({ playing: true });\n  }\n\n  stop() {\n    this.setState({ playing: false });\n  }\n\n  reset(randomize = false) {\n    this.setState({\n      board: this.makeBoard(INITIAL_WIDTH, INITIAL_HEIGHT, randomize),\n      finished: false,\n      generation: 0,\n    });\n  }\n\n  runSteps() {\n    if (this.state.playing && !this.state.finished) {\n      this.nextStep();\n      setTimeout(this.runSteps.bind(this), this.state.speed);\n    }\n  }\n\n  nextStep() {\n    const newBoard = [];\n    let changed = false;\n    for (let r = 0; r < this.state.board.length; r++) {\n      newBoard[r] = [];\n      for (let c = 0; c < this.state.board[0].length; c++) {\n        const nbAliveNeighbours = this.getNumberOfNeighboursAlive(r, c);\n        const alive = this.state.board[r][c];\n        newBoard[r][c] = false;\n        if (nbAliveNeighbours === 3) {\n          newBoard[r][c] = true;\n        } else if (alive && nbAliveNeighbours === 2) {\n          newBoard[r][c] = true;\n        }\n\n        if (alive !== newBoard[r][c]) {\n          changed = true;\n        }\n      }\n    }\n\n    if (changed) {\n      this.setState({\n        board: newBoard,\n        generation: this.state.generation + 1,\n      });\n    } else {\n      this.setState({\n        finished: true,\n        playing: false,\n      });\n    }\n  }\n\n  getNumberOfNeighboursAlive(r, c) {\n    const boardRowLength = this.state.board.length,\n      boardColumnLength = this.state.board[0].length;\n    let nb = 0;\n\n    for (let r1 = r - 1; r1 <= r + 1; r1++) {\n      /* Circular row */\n      const row = (r1 < 0 ? boardRowLength + r1 : r1) % boardRowLength;\n      for (let c1 = c - 1; c1 <= c + 1; c1++) {\n        /* Circular column */\n        const column =\n          (c1 < 0 ? boardColumnLength + c1 : c1) % boardColumnLength;\n\n        /**\n         * Coordinate (r, c) belong to the cell from which we want the neighbours. We don't need to verify its value.\n         * Verify that the nieghbour cell is alive\n         */\n        if ((column !== c || row !== r) && this.state.board[row][column]) {\n          nb++;\n        }\n      }\n    }\n\n    return nb;\n  }\n\n  toggleCellStatus(r, c) {\n    const newBoard = JSON.parse(JSON.stringify(this.state.board));\n    newBoard[r][c] = !this.state.board[r][c];\n    this.setState({ board: newBoard });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Row>\n          <Col sm={3}>\n            <Menu\n              play={this.play.bind(this)}\n              stop={this.stop.bind(this)}\n              reset={this.reset.bind(this)}\n              nextStep={this.nextStep.bind(this)}\n              generation={this.state.generation}\n              playing={this.state.playing}\n              finished={this.state.finished}\n            />\n          </Col>\n          <Col sm={9}>\n            <GameBoard\n              board={this.state.board}\n              toggleCellStatus={this.toggleCellStatus.bind(this)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n  faPlay,\n  faStop,\n  faStepForward,\n  faSync,\n  faRandom\n} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(fab, faPlay, faStop, faStepForward, faSync, faRandom);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}